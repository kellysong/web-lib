### set log levels ###
### 根配置语法:log4j.rootLogger = [ level ] , appenderName, appenderName, …
### Log4j根据日志信息的重要程度，分OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#Log4j官方建议实际实用的话，Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG,所以上面我们制定INFO后debug级别的就不再输出了
log4j.rootLogger = INFO,C,I,W,E 
### console ###
### 控制台日志
log4j.appender.C = org.apache.log4j.ConsoleAppender
log4j.appender.C.Target = System.out
log4j.appender.C.layout = org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern = [%p] %-d{yyyy-MM-dd HH:mm:ss}/%l:%m --> %t%n

### INFO log file ###
### 每天一个文件
log4j.appender.I = org.apache.log4j.DailyRollingFileAppender
log4j.appender.I.File = ../logs/info.log
log4j.appender.I.Append = true
log4j.appender.I.Threshold = INFO 
log4j.appender.I.layout = org.apache.log4j.PatternLayout
log4j.appender.I.layout.ConversionPattern = [%p] %-d{yyyy-MM-dd HH:mm:ss}/%l:%m --> %t%n
log4j.appender.I.filter.infoFilter = org.apache.log4j.varia.LevelRangeFilter
log4j.appender.I.filter.infoFilter.LevelMin = INFO
log4j.appender.I.filter.infoFilter.LevelMax = INFO

### WARN log file ###
### 每天一个文件
log4j.appender.W = org.apache.log4j.DailyRollingFileAppender
log4j.appender.W.File = ../logs/warn.log
log4j.appender.W.Append = true
log4j.appender.W.Threshold = WARN 
log4j.appender.W.layout = org.apache.log4j.PatternLayout
log4j.appender.W.layout.ConversionPattern = [%p] %-d{yyyy-MM-dd HH:mm:ss}/%l:%m --> %t%n
log4j.appender.W.filter.infoFilter = org.apache.log4j.varia.LevelRangeFilter
log4j.appender.W.filter.infoFilter.LevelMin = WARN
log4j.appender.W.filter.infoFilter.LevelMax = WARN

### ERROR log file###
### 每天一个文件
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = ../logs/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = [%p] %-d{yyyy-MM-dd HH:mm:ss}/%l:%m --> %t%n

#%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
#%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
#%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
#%t：输出产生该日志事件的线程名。
#%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
#%c：输出日志信息所属的类目，通常就是所在类的全名。
#%M：输出产生日志信息的方法名。
#%F：输出日志消息产生时所在的文件名称。
#%L:：输出代码中的行号。
#%m:：输出代码中指定的具体日志信息。
#%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。
#%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
#%%：输出一个"%"字符。